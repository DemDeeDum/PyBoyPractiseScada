import pymysql
import datetime
from datetime import timedelta 
import re
from contextlib import closing
from pymysql.cursors import DictCursor



def get_last_message():
    connection = pymysql.connect(
    host='localhost',
    user='root',
    password='narutoccc21',
    db='scadadb', 
    charset='utf8mb4', 
    cursorclass=DictCursor
    )
    try:
        with closing(connection.cursor()) as cursor:
       
            # SQL 
            sql = "select Text, Timestamp from scadadb.messages_data where Timestamp = (SELECT MAX(Timestamp) FROM scadadb.messages_data ) "

            cursor.execute(sql)
            res = cursor.fetchone()
            
            return "%s %s\n"%(res["Text"], res["Timestamp"].strftime("%Y-%m-%d %H:%M:%S"))
    except:
        return "Error"

def get_last_log():
    connection = pymysql.connect(
    host='localhost',
    user='root',
    password='narutoccc21',
    db='scadadb', 
    charset='utf8mb4', 
    cursorclass=DictCursor
    )
    try:
        with closing(connection.cursor()) as cursor:
       
            # SQL 
            sql = "select name, Value, Timestamp from scadadb.trends_data where Timestamp = (SELECT MAX(Timestamp) FROM scadadb.trends_data ) "

            cursor.execute(sql)
            res = cursor.fetchone()
            
            return ("–ó–Ω–∞—á–µ–Ω–∏–µ —Å–±–æ—Ä–Ω–∏–∫–∞ <b>%s</b>: %s\n–í—Ä–µ–º—è: %s\n"
            %(res['name'], res["Value"], res["Timestamp"].strftime("%Y-%m-%d %H:%M:%S")))
    except:
        return "Error"

def get_messages_by_type(message_type):
    if message_type != -3 and message_type != -2 :
        return "Unexpected parameter"
    connection = pymysql.connect(
    host='localhost',
    user='root',
    password='narutoccc21',
    db='scadadb', 
    charset='utf8mb4', 
    cursorclass=DictCursor
    )
    try:
        
        with closing(connection.cursor()) as cursor:
       
            # SQL 
            sql = "select Text, Timestamp from (SELECT * FROM scadadb.messages_data ORDER BY Timestamp DESC) AS b where b.GroupID = %i limit 10"%(message_type)
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ (Execute Query).
            cursor.execute(sql)

            res = ""
            it = 1

            for row in cursor:
                res += "%i) %s <b>%s</b>\n"%(it, row["Text"], row["Timestamp"].strftime("%Y-%m-%d %H:%M:%S"))
                it = it + 1
            return res
    except:
        return "Error"

def get_objects_by_date(date_to_search, obj, select_mode) :
    str_to_query = check_and_get_new_datetime(date_to_search)
    if str_to_query == "Error" :
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"
    connection = pymysql.connect(
    host='localhost',
    user='root',
    password='narutoccc21',
    db='scadadb', 
    charset='utf8mb4', 
    cursorclass=DictCursor
    )


    try :

        with closing(connection.cursor()) as cursor:
       
            # SQL 
            sql = ("select * from scadadb.%s where Timestamp > timestamp('%s') and Timestamp <= timestamp('%s') %s limit 30"
            %(obj, date_to_search, str_to_query.strftime("%Y-%m-%d %H:%M:%S"),
            "" if select_mode == "–æ–±–∞" else 'and name="%s"'%(select_mode)))
        
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ (Execute Query).
            cursor.execute(sql)
            res = ""
            it = 1
            if obj == 'trends_hour':
                prop = "Value"
            else :
                prop = "Text"

            for row in cursor:
                res += "%i) %s %s –í—Ä–µ–º—è:<b>%s</b>\n"%(it, ("–°–±–æ—Ä–Ω–∏–∫ %s: "%(row['name']) if obj == 'trends_hour' else ""),
                row[prop], row["Timestamp"].strftime("%Y-%m-%d %H:%M:%S"))
                it = it + 1
            return res
    except :
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"
             

def check_and_get_new_datetime(date_str):
    if(len(date_str) != 19) :
        return "Error"
    try:
        buf_date = date_str.split('-')
        item = buf_date[len(buf_date) - 1]
        buf_date.pop()
        buf_time = item.split(' ')
        buf_date.append(buf_time[0])
        buf_time.pop(0)
        buf_time = ''.join(buf_time).split(':')
        check = datetime.datetime(int(buf_date[0]), int(buf_date[1])
        , int(buf_date[2]), int(buf_time[0])
        , int(buf_time[1]), int(buf_time[2]))
        return check + timedelta(minutes=1)
    except:
        return "Error"



def get_average_value_by_date(initial_date, end_date, select_mode) :
    check_initial = check_and_get_new_datetime(initial_date)
    check_end = check_and_get_new_datetime(end_date)
    if check_initial == "Error" or check_end == "Error" :
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"
    if check_initial > check_end :
        return "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π!"
    connection = pymysql.connect(
    host='localhost',
    user='root',
    password='narutoccc21',
    db='scadadb', 
    charset='utf8mb4', 
    cursorclass=DictCursor
    )


    try :

        with closing(connection.cursor()) as cursor:
       
            # SQL 
            sql = ("select AVG(Value) from scadadb.trends_hour where Timestamp > timestamp('%s') and Timestamp <= timestamp('%s') %s"
            %(initial_date, end_date,
            "" if select_mode == "–æ–±–∞" else 'and name="%s"'%(select_mode)))
        
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ (Execute Query).
            cursor.execute(sql)
            val = cursor.fetchone()['AVG(Value)']
            if val is None:
                return "–ù–∞ –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç %s –¥–æ %s %s"%(
                    initial_date, end_date,
                    "–Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–æ–≥–∞!"
                )

            return ('–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π %s —Ä–∞–≤–Ω—è–µ—Ç—Å—è <b>%s</b>üòá %s%s'%(
                ("–æ–±–µ–∏—Ö —Å–±–æ—Ä–Ω–∏–∫–æ–≤" if select_mode=="–æ–±–∞" else
                '—Å–±–æ—Ä–Ω–∏–∫–∞ %s'%(select_mode))
                ,val,
                "\n–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è",
                " –∫–æ–º–∞–Ω–¥—É /getLogsByTime !!"))
    except :
        return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!"
             
















myd = datetime.datetime.now()
lasthour = datetime.datetime(myd.year, myd.month , myd.day , myd.hour, myd.minute, myd.second)
print(lasthour.strftime("%Y-%m-%d %H:%M:%S"))
datead = datetime.datetime(2020,5,16,8,10,12)
if datead.strftime("%Y-%m-%d %H:%M:%S") == '2020-05-16 08:10:12':
    print("aaaa!")



def get_last_hour_messages():
    try:
  
        with connection.cursor() as cursor:
       
            # SQL 
            sql = "select Text from scadadb.messages_data where Timestamp > timestamp('%s')"%(datead.strftime("%Y-%m-%d %H:%M:%S"))
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ (Execute Query).
            cursor.execute(sql)
         
            print ("cursor.description: ", cursor.description)
 
            print()

            for row in cursor:
                print(row["Text"])
    except:
        return "Error"
             

def f():
    try:
  
        with connection.cursor() as cursor:
       
            # SQL 
            sql = "select * from scadadb.trends_day"
         
            # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—Ä–æ—Å–∞ (Execute Query).
            cursor.execute(sql)
         
            print ("cursor.description: ", cursor.description)
 
            print()
    
        # for row in cursor:
            #print(row['Value'])
    except:
        return "Error"         